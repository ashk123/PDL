#!/usr/bin/bash

# LainOS Orginal Program 227865 2022
# This Project Writed for help you to Install Other Programs
# Writer : Eiko Akiba
# ---- For LainOS Team ----

# Information ( Don't change thease texts )
# default repo is https://github.com/ashk123/PDLP
# default OS is LainOS
# default version is 2.9
# default SHOW is all
# default MENU is 1
# default CONF_PATH is ~/.pdlrc
# pdlrc.sample is a sample config file

# Config Structure
# your config file should be on ~/.pdlrc ( you can change it on CONF_PATH var )
# repo: its a repo git address like https://yourgitservice/yourusername/yourpdlpreponame
# show: how menu start when you run pdl
# list: when you use -l, which group of programs that pdl should show you

VERSION="2.9"
NAME="LainOS LPD Package Downloader"
OS='LainOS'
CONF_PATH=$HOME
MENU='1'
SHOW='all'
REPO='https://github.com/ashk123/PDLP'
IFS=';'


function echo_title() {     echo -ne "\033[1;44;37m${*}\033[0m\n"; }
function echo_caption() {   echo -ne "\033[0;1;44m${*}\033[0m\n"; }
function echo_bold() {      echo -ne "\033[0;1;34m${*}\033[0m\n"; }
function echo_danger() {    echo -ne "\033[0;31m${*}\033[0m\n"; }
function echo_success() {   echo -ne "\033[0;32m${*}\033[0m\n"; }
function echo_warning() {   echo -ne "\033[0;33m${*}\033[0m\n"; }
function echo_secondary() { echo -ne "\033[0;34m${*}\033[0m"; }
function echo_info() {      echo -ne "\033[0;35m${*}\033[0m\n"; }
function echo_primary() {   echo -ne "\033[0;36m${*}\033[0m\n"; }
function echo_error() {     echo -ne "\033[0;1;31merror:\033[0;31m\t${*}\033[0m\n"; }
function echo_label() {     echo -ne "\033[0;1;32m${*}:\033[0m\t"; }
function echo_prompt() {    echo -ne "\033[0;36m${*}\033[0m "; }
function splash() {
    local hr
    hr=" **$(printf "%${#1}s" | tr ' ' '*')** "
    echo_title "${hr}"
    echo_title " * $1 * "
    echo_title "${hr}"
    echo
}

function select_option {

    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "$1 "; }
    print_selected()   { printf "$ESC[7m$1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    for opt; do printf "\n"; done

    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}

# New version of PatchAdder (Beta)
function patch_adder()
{
	stext=$1
	slen=${#stext}
	if [[ ${stext:$((slen - 3)):3} != "pdl" ]]; then
		echo_danger "You can't use any file type, it must be a .pdl patch file!";
		return 0
	fi

	if [ -f "$(pwd)/$1" ]; then
		path=$1
	else
		if [ -f "$(pwd)/PDLP/$1" ]; then
			path="PDLP/$1"
		else
			echo "Your file was not found!"
			return 0;
		fi
	fi

	file_name=$(sed -n 1p $path)
	file_name_org=${file_name:7}

	pfiles=$(sqlite3 mainsb "SELECT name FROM cus_prg")
	mapfile pars_names <<< "$pfiles"
	for ((a = 0; a < ${#pars_names[@]}; a++))
	{
		org=${pars_names[$a]};
		if [[ $file_name_org == ${org:0:-1} ]]; then
			echo_danger "You have already have $file_name_org patch file!"
			return 1;
		fi
	}
	org=""
	num=0;
	code=$(cat $path | sed '/^[[:space:]]*$/d')
	mapfile -t data <<< "$code"
	for ((i = 1; i < ${#data[@]}; i++))
	{
		d=${data[$i]}
		if [[ ${data[$i]} != "" ]]; then
			if  [[ ${d:0:6} == "--code" ]]; then
				num="1";
			elif [[ $num == "1" ]]; then
				org+="${data[$i]};"
			elif [[ ${d:0:6} == "--desc" ]]; then
				num="2";
			elif [[ $num == "2" ]]; then
				org_des+="$d\n"
			fi

		fi
	}
	sqlite3 mainsb "insert into cus_prg values ('$file_name_org', '$org_des', '$org');"
	echo_success "[+] The $1 patch file was applied"
	org=""
	org_des=""
}

# Orginal And Ols version of PatchAdder function
#function patch_adder()
#{
#	stext=$1
#	slen=${#stext}
#	if [[ ${stext:$((slen - 3)):3} != "pdl" ]]; then
#		echo_danger "you can't use any file type !";
#		return 0
#	fi
#
#	if [ -f "$(pwd)/$1" ]; then
#		path=$1
#	else
#		if [ -f "$(pwd)/PDLP/$1" ]; then
#			path="PDLP/$1"
#		else
#			echo "your file is not found !"
#			return 0;
#		fi
#	fi	
#	file_name=$(sed -n 1p $path)
#	file_name_org=${file_name:7}
#	
#	pfiles=$(sqlite3 mainsb "SELECT name FROM cus_prg")
#	mapfile pars_names <<< "$pfiles"
#	for ((a = 0; a < ${#pars_names[@]}; a++))
#	{
#		org=${pars_names[$a]};
#		if [[ $file_name_org == ${org:0:-1} ]]; then
#			echo_danger "you have already had $file_name_org this file !"
#			return 1;
#		fi
#	}
#
#	code=$(cat $path | sed '/^[[:space:]]*$/d')
#	mapfile -t data <<< "$code"
#	for ((i = 2; i < ${#data[@]}; i++))
#	{
#		if [[ ${data[$i]} != "" ]]; then
#			org+="${data[$i]};"
#		fi
#	}
#	sqlite3 mainsb "insert into cus_prg values ('$file_name_org', 'This is new Program for new mode in PDL', '$org');"
#	echo_success "[+] The $1 patch file was applied"
#	org=""
#}

function ConfigCore(){
	shopt -s extglob
	configfile="$CONF_PATH/.pdlrc" 	
	tr -d '\r' < $configfile > $configfile.unix
	while IFS='= ' read -r lhs rhs
	do
	    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
		rhs="${rhs%%\#*}"
		rhs="${rhs%%*( )}"
		rhs="${rhs%\"*}"
		rhs="${rhs#\"*}" 
		declare $lhs="$rhs"
	    fi
	done < $configfile.unix
	rm -rf $CONF_PATH/.pdlrc.unix
	
	if (( ${#repo} > 2 )); then
		REPO=$repo;
	fi

	if (( ${#menu} > 0 )); then
		MENU=$menu;
	fi
	
	if (( ${#list} > 1 )); then
		SHOW=$list;
	fi
}


cust=()
$selc;
$pck_name;
$str;

# PDL Banner
splash "LainOS PRGD - V$VERSION"
if [ -f "$CONF_PATH/.pdlrc" ]; then
	ConfigCore
fi

function pe() {
    dpkg -s "$1" &> /dev/null
    return $?
}

function help()
{
	echo_caption "-- LainOS Package Downloader LainOS (PDL) Version $VERSION --"
	echo
	echo_primary "Description :"
	echo_secondary "	This tool helps you to download and install packages that you can see in APT-REP or GIT-REP\n"
	echo_secondary "  	We use Save installer commands into a database and you can install all packages with one click\n"
	echo_secondary "	You should have GIT for download from remote repository\n"
	echo_secondary "	Is git available? "
	if pe "git"; then
		echo_success "Yes!"
	else
		echo_danger "No!"
	fi
	echo
	echo "-------------"
	echo_primary "Arguments :"
	echo_secondary "-h/--help         "; echo_info "help command"
	echo_secondary "-p         	  "; echo_info "add patch file to PDL"
	echo_secondary "-n         	  "; echo_info "install normal level programs"
	echo_secondary "-c         	  "; echo_info "install compile level programs"
	echo_secondary "-i         	  "; echo_info "install custom programs"
	echo_secondary "-l		  "; echo_info "list all programs and PDL patch files that currently PDL have"
	echo_secondary "-u/--update       "; echo_info "update patch files from PDLP git repository"
	echo_secondary "-d       	  "; echo_info "remove program with name"
	echo_secondary "-r       	  "; echo_info "print repository that pdl is currently using"
	echo_secondary "-v       	  "; echo_info "print version information"
}

function comp_inst()
{
	data=($(sqlite3 mainsb 'select name from comp_prg'))
	mapfile -t arr7 <<< "$data"
	for ((i = 0; i < ${#arr7[@]}; i++))
	{
		if pe ${arr7[$i]}; then
			echo_warning "[!] You already have ${arr7[$i]} package installed!"
		else
			eval "sudo apt install ${arr7[$i]}"
		fi
	}
}

function norm_inst()
{
	data2=($(sqlite3 mainsb 'select name from norm_prg'))
	mapfile -t arr5 <<< "$data2"
	for ((i = 0; i < ${#arr5[@]}; i++))
	{
		if pe ${arr5[$i]}; then
			echo_warning "[!] You already have ${arr5[$i]} package installed!"
		else
			eval "sudo apt install ${arr5[$i]}"
		fi
	}
}

function customize_installation()
{
	local t=$1
	echo "[+] $t item is added to your program list."
	cust+=($t)
}

function custom()
{
	data_name=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t dnc <<< "$data_name"
	for ((o = 0; o < ${#dnc[@]}; o++))
	do
		if [[ ${dnc[$o]} == $1 ]]; then
			data_code=$(sqlite3 mainsb "select code from cus_prg where name='$1'")
			read -a str <<< "$data_code"
			break
		fi
	done
	for ((i = 0; i < ${#str[@]}; i++))
	do
		echo_label "[!] Executing"
		echo_info ${str[$i]}
		eval ${str[$i]}
	done
}

function GetCount(){
	norm_count=($(sqlite3 mainsb "select name from norm_prg"))
	comp_count=($(sqlite3 mainsb "select name from comp_prg"))
	cus_count=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t ncc <<< "$norm_count"		
	mapfile -t ccc <<< "$comp_count"
	mapfile -t cucc <<< "$cus_count"
}
GetCount

function net()
{
	if pe "git"; then
		echo
	else
		echo_error "You don't have git installed, you should install git first ..."
		return 0;
	fi

	git clone "$REPO" -q
	file=$(ls PDLP)
	mapfile -t files <<< "$file"
	for ((a = 0; a < ${#files[@]}; a++))
	do
		patch_adder ${files[$a]}
	done
	rm -rf PDLP
}

function choos_item_cust()
{
	cust_names=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t arr3 <<< "$cust_names"
	echo "$1"
}

function custom_menu()
{
	echo_label "\nYou have these options";
	echo ""
	custs=()
	cust_names=($(sqlite3 mainsb "select name from cus_prg"))
	desc_list=($(sqlite3 mainsb "select description from cus_prg"))
	mapfile -t arr3 <<< "$cust_names"
	mapfile -t arr4 <<< "$desc_list"
	echo_secondary "----------------------------\n"
	for ((i3 = 0; i3 < ${#arr3[@]}; i3++))
	do
		echo_secondary "$((i3 + 1)) - ${arr3[$i3]}\n"
		echo_secondary "\n${arr4[$i3]}\n";
		echo_secondary "----------------------------\n"
		custs+=(${arr3[$i3]})
	done
	echo ""
	read -p "Package number: " pck_name
	case $pck_name in
		''|*[!0-9]*)
			echo_error "Not a number! You must enter a valid number."
		;;
		*)
			num=$((pck_name - 1))
			custom ${custs[num]}
		;;
	esac
}

function prg_list()
{
	data_name=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t prg_names <<< "$data_name"
	for ((a = 0; a < ${#prg_names[@]}; a++))
	{
		echo "$((a + 1)) - ${prg_names[$a]}"
	}
	if [[ $SHOW == "all" ]]; then
		data_name=($(sqlite3 mainsb "select name from norm_prg"))
		mapfile -t norm_names <<< "$data_name"
		for ((b = 0; b < ${#norm_names[@]}; b++))
		{
			echo "$((a + 1)) - ${norm_names[$b]}"
			a=$a+1
		}
		data_name=($(sqlite3 mainsb "select name from comp_prg"))
		mapfile -t comp_names <<< "$data_name"
		for ((c = 0; c < ${#comp_names[@]}; c++))
		{
			echo "$((a + 1)) - ${comp_names[$c]}"
			a=$a+1
		}
		echo
	fi
	echo "Total: $((a))"
}

function cus_remove()
{
	# Sql-Injection Zone - we should check value or better way use regex
	sqlite3 mainsb "delete from cus_prg where name = '$1'"
	echo "[+] Package $1 removed from custom packages"
}

function main_menu()
{
	echo ""
	echo_primary "1. Normal installation (${#ncc[@]})"
	echo_primary "2. Compilers           (${#ccc[@]})"
	echo_primary "3. Custom list         (${#cucc[@]})"
}

if [ -z "$*" ] || [ $1 == "-s" ] && [[ $MENU == "1" ]]; then
	while [ true ]
	do
		GetCount
		main_menu
		read -p ": " selc
		if [[ $selc == "h" ]]; then
			help;
		elif [[ $selc == "1" ]]; then
			norm_inst;
		elif [[ $selc == "2" ]]; then
			comp_inst;
		elif [[ $selc == "3" ]]; then
			custom_menu
		elif [[ $selc == "list 1" ]] || [[ $selc == "l 1" ]]; then
			echo_primary "\n-- Normal installation packages --"
			data=($(sqlite3 mainsb 'select name from norm_prg'))
			mapfile -t arr2 <<< "$data"
			for ((i4 = 0; i4 < ${#arr2[@]}; i4++))
			do
				echo_secondary "[+] Package ${arr2[$i4]}\n"
			done
		elif [[ $selc == "list 2" ]] || [[ $selc == "l 2" ]]; then
			echo_primary "\n-- Compilers installation packages --"
			data2=($(sqlite3 mainsb 'select name from comp_prg'))
			mapfile -t arr <<< "$data2"
			for ((i2 = 0; i2 < ${#arr[@]}; i2++))
			do
				echo_secondary "[+] Package ${arr[$i2]}\n"
			done
		elif [[ $selc == "exit" ]] || [[ $selc == "q" ]]; then
			break
		elif [[ $selc == "version" ]]; then
			echo $VERSION
		elif [[ $selc == "os" ]]; then
			echo $OS
		else
			echo "Please enter a valid option."
		fi
	done
	
elif  [[ $MENU == "0" ]] || [ $1 == "-m" ]; then
	options=("1. Normal installation (${#ncc[@]})" "2. Compilers           (${#ccc[@]})" "3. Custom list         (${#cucc[@]})")
	case `select_opt "${options[@]}"` in
	    0) norm_inst;;
	    1) comp_inst;;
	    2) custom_menu;;
	esac
elif [ $1 == "--help" ] || [ $1 == "-h" ]; then
	help
elif [ $1 == "-p" ]; then
	patch_adder $2
elif [ $1 == "-u" ] || [ $1 == "--update" ]; then
	net
elif [ $1 == "-n" ]; then
	norm_inst
elif [ $1 == "-c" ]; then
	comp_inst
elif [ $1 == "-i" ]; then
	custom $2
elif [ $1 == "-v" ]; then
	echo "v$VERSION";
elif [ $1 == "-l" ]; then
	prg_list
elif [ $1 == "-d" ]; then
	cus_remove $2
elif [ $1 == "-r" ]; then
	echo $REPO;
else
	echo_danger "That was not a valid command!, try ./pdl --help"
fi
